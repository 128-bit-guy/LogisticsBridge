buildscript {
    ext.configFile = file "build.properties"
    configFile.withReader {
        // Load config.  It shall from now be referenced as simply config or project.config
        def prop = new Properties()
        prop.load(it)
        project.ext.config = new ConfigSlurper().parse prop
    }
    ext.kotlin_ver = "${config.kotlin_ver}"
    
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_ver"
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

ext.configFile = file "build.properties" //Need fix here
configFile.withReader {
   // Load config.  It shall from now be referenced as simply config or project.config
   def prop = new Properties()
   prop.load(it)
   project.ext.config = new ConfigSlurper().parse prop
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'net.minecraftforge.gradle'

def forge_version = ${config.forge_ver}
def mappings_version = ${config.mappings_ver}
version = "${config.minecraft_ver}-$System.env.MOD_VER"

minecraft {
    mappings channel: 'snapshot', version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run-server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}


repositories {
    jcenter()
    maven {
        name = 'JitPack.io'
        url = 'https://jitpack.io'
    }
    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        name = "forge"
        url = "https://libraries.minecraft.net"
    } 
    flatDir { dirs "./lib" }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_ver
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_ver
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'
    //
    minecraft group: 'net.minecraftforge', name: 'forge', version: forge_version
    //
    compileOnly ":logisticspipes-${config.lp_ver}-api"
    compileOnly ":NotEnoughItems-${config.mc_ver}-${config.nei_ver}-deobf"
    implementation ":logisticspipes-${config.lp_ver}-deobf"
    api fg.deobf (":MCMultiPart-${config.mcmp_ver}")
    api fg.deobf (":ThermalDynamics-${config.mc_ver}-${config.td_ver}-universal")
    api fg.deobf (":refinedstorage-${config.rs_ver}")
    api fg.deobf (":appliedenergistics2-${config.ae_ver}")
    //
    runtimeOnly ":refinedstorage-${config.rs_ver}"
    runtimeOnly ":MCMultiPart-${config.mcmp_ver}"
    runtimeOnly ":ThermalExpansion-${config.mc_ver}-${config.te_ver}-universal"
    runtimeOnly ":ThermalFoundation-${config.mc_ver}-${config.tf_ver}-universal"
    runtimeOnly ":CoFHCore-${config.mc_ver}-${config.cofhc_ver}-deobf"
    runtimeOnly ":CoFHWorld-${config.mc_ver}-${config.cofhw_ver}-universal"
    runtimeOnly ":RedstoneFlux-${config.mc_ver_short}-${config.rf_ver}-deobf"
    runtimeOnly ":CodeChickenLib-${config.mc_ver}"
    // https://mvnrepository.com/artifact/javassist/javassist
    shade group: 'javassist', name: 'javassist', version: '3.12.1.GA'
}

tasks.withType(Wrapper) {
    version = 4.9
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

jar.finalizedBy('reobfJar')
